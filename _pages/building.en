---
ID: 20
post_title: Building
author: hohndel
post_date: 2011-10-06 03:49:48
post_excerpt: ""
layout: page
permalink: >
  https://subsurface-divelog.org/documentation/building/
published: true
---
[et_pb_section admin_label="section"][et_pb_row admin_label="row"][et_pb_column type="4_4"][et_pb_post_title admin_label="Post Title" global_module="1887" saved_tabs="all" title="on" meta="off" author="on" date="on" categories="on" comments="on" featured_image="off" featured_placement="below" parallax_effect="on" parallax_method="on" text_orientation="left" text_color="dark" text_background="off" text_bg_color="rgba(255,255,255,0.9)" module_bg_color="rgba(255,255,255,0)" title_font="|on|||" title_font_size="31px" title_text_color="#204a87" title_line_height="1.3em" title_all_caps="off" use_border_color="off" border_color="#ffffff" border_style="solid"]



[/et_pb_post_title][et_pb_text admin_label="Text" background_layout="light" text_orientation="left" use_border_color="off" border_color="#ffffff" border_style="solid"]

License: GPLv2

You can get the sources to the latest development version from our <a href="http://github.com/Subsurface-divelog/subsurface.git">git repository</a> or you can download [s-var slug="srctarurl"][s-var slug="srctar"][s-var slug="endlink"] from our website.

Subsurface uses a few open source libraries and frameworks to do its job. The most important ones include libdivecomputer, Qt, Marble (more precisely libmarblewidget), libxml2, libxslt, libsqlite3, libzip, libgrantlee5 and libgit2.

Below are instructions for building Subsurface under some popular Linux distributions, for building Subsurface using Homebrew on a Mac, and for cross-building Subsurface for Windows. The lack of a working package management system for Windows makes it really painful to build Subsurface natively under Windows, so we don't support that at all.

All of the prebuilt binaries that we provide (right now Windows, Mac, Ubuntu/Debian/LinuxMint, and openSUSE/Fedora) are built using our own
custom "flavors" of libdivecomputer and libmarblewidget. You can get these from the Subsurface git server as
<pre><code>git://git.subsurface-divelog.org/marble (in the Subsurface-branch branch)
git://git.subsurface-divelog.org/libdc (in the Subsurface-branch branch)</code></pre>
Subsurface requires Qt5, Qt5.4 or newer is recommended and on the Mac, in order to get native Bluetooth support, Qt5.5 is necessary.

Similarly, in order for our cloud storage to be fully functional you need libgit2 0.23 or newer.

Finally, as of Subsurface 4.5 we have switched our build system to cmake.
qmake based builds are no longer supported.
<h2>Build options for Subsurface</h2>
With cmake it's very easy to edit the build options for Subsurface. Once you have gone through the build process explained below you can simply run
<pre><code>ccmake .</code></pre>
in the Subsurface build directory and that will show you the important options and their current settings.

The Makefile that was created using cmake can be forced into a much more verbose mode by calling
<pre><code>make VERBOSE=1</code></pre>
<h2>Building Subsurface under Linux</h2>
On Fedora you can do
<pre><code>sudo dnf install git gcc-c++ make autoconf automake libtool cmake \
        libzip-devel libxml2-devel libxslt-devel libsqlite3x-devel \
        libgit2-devel libudev-devel libusbx-devel libcurl-devel libssh2-devel \
        qt5-qtbase-devel qt5-qtdeclarative-devel qt5-qtscript-devel \
        qt5-qtwebkit-devel qt5-qtsvg-devel qt5-qttools-devel \
        qt5-qtconnectivity-devel qt5-qtlocation-devel</code></pre>

Package names are sadly different on OpenSUSE
<pre><code>sudo zypper install git gcc-c++ make autoconf automake libtool cmake libzip-devel \
        libxml2-devel libxslt-devel sqlite3-devel libgit2-devel libusb-1_0-devel \
        libqt5-linguist-devel libqt5-qttools-devel libQt5WebKitWidgets-devel \
        libqt5-qtbase-devel libQt5WebKit5-devel libqt5-qtsvg-devel \
        libqt5-qtscript-devel libqt5-qtdeclarative-devel \
        libqt5-qtconnectivity-devel libqt5-qtlocation-devel</code></pre>
On Debian, Ubuntu, and Linux Mint this seems to work (however, on recent Debian and Ubuntu you can omit the libqt5declarative5, if it is not found)
<pre><code>sudo apt-get install git g++ make autoconf libtool cmake pkg-config \
        libxml2-dev libxslt1-dev libzip-dev libsqlite3-dev \
        automake libusb-1.0-0-dev libgit2-dev libssl-dev \
        qt5-default qt5-qmake qtchooser qttools5-dev-tools libqt5svg5-dev \
        libqt5webkit5-dev libqt5qml5 libqt5quick5 libqt5declarative5 \
        qtscript5-dev libssh2-1-dev qttools5-dev \
        qtpositioning5-dev qtconnectivity5-dev</code></pre>
In order to build Subsurface, use the supplied build script. This should work on most systems that have all the prerequisite packages installed. Start by checking out the Subsurface sources in a sane place, something like this:
<pre><code>mkdir -p ~/src
cd ~/src
git clone  git://github.com/Subsurface-divelog/subsurface
cd subsurface
git checkout v[s-var slug="latest"]
cd ..
./subsurface/scripts/build.sh </code></pre>
Now you can run Subsurface like this:
<pre><code>cd ~/src/subsurface/build
./subsurface</code></pre>
<h2>Building Subsurface under MacOS X</h2>
0) You need to have XCode installed. The first time (and possibly after updating OSX) you need to run
<pre><code>xcode-select --install</code></pre>
1) Install Homebrew
<pre><code>ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</code></pre>
2) Install needed dependencies
<pre><code>brew install automake autoconf libtool asciidoc libzip sqlite cmake libusb libssh2 pkg-config hidapi</code></pre>
3) Make the brew version of sqlite the default
<pre><code>brew link --force sqlite</code></pre>
4) Download Qt from <a href="http://www.qt.io/download-open-source/">http://www.qt.io/download-open-source/</a>
In the installer, chose an install folder (e.g., <code>/home/username/Qt</code>), in "Select components" select the most recent version and unselect the Android and IOS packages as well as QtWebEngine, Qt3D, Qt Canvas 3D and the Qt Extras.
5) run the build script
<pre><code>cd ~/src
bash subsurface/scripts/build.sh</code></pre>
After the above is done, Subsurface.app will be available in the subsurface/build directory. You can run Subsurface with the command
<pre><code>open subsurface/build/Subsurface.app</code></pre>
or you can move this folder to /Applications to install Subsurface for every user.
<h2>Subsurface Companion App on Android</h2>
<h3>This is NOT Subsurface-mobile (which is built from the main repository above). This is an older app that is just used to track GPS locations for dive sites.</h3>
This application is available in the <a href="https://play.google.com/store/apps/details?id=org.subsurface">Google Play Store</a>. It is also under GPLv2 and sources are at <a href="http://git.subsurface-divelog.org/?p=subsurface-companion.git;a=summary"><code>git://subsurface-divelog.org/subsurface-companion.git</code></a>

[/et_pb_text][/et_pb_column][/et_pb_row][/et_pb_section]
